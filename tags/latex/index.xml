<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
  xmlns:admin="http://webns.net/mvcb/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd">

<channel>
      <title> in Yukio Fukuzawa </title>
	  <itunes:subtitle>Yukio Fukuzawa's personal blogs</itunes:subtitle>
	  <itunes:author>Yukio Fukuzawa</itunes:author>
	  <itunes:owner>
	  <itunes:name>Yukio Fukuzawa</itunes:name>
	  <itunes:email>y@ this domain</itunes:email>
	  </itunes:owner>
	  <itunes:category text="Education">
	  <itunes:category text="Higher Education"/>
	  </itunes:category>
	  <itunes:keywords>phd, latex, yukio fukuzawa, massey, new zealand</itunes:keywords>
	  <itunes:explicit>no</itunes:explicit>
	  <itunes:image href="https://www.ukio.info//img/avatar2.jpg" />
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>https://www.ukio.info/tags/latex/index.xml</link>
    <language>en-us</language>
    
    
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
 
    <item>
      <title>From Mendeley to LaTeX: a seamless integration</title>
      <link>https://www.ukio.info/blog/mendeley-to-tex/</link>
      <pubDate>Sat, 10 Dec 2016 00:01:00 &#43;1200</pubDate>
      
      <guid>https://www.ukio.info/blog/mendeley-to-tex/</guid>
      <description>&lt;![CDATA[&lt;p&gt;Mendeley is the only reference manager, as I know, capable of updating a &lt;code&gt;bib&lt;/code&gt; file on the fly. That is: as soon as you import a new reference or make a change to an existing reference, it will export the updated version of the library to the &lt;code&gt;library.bib&lt;/code&gt; file in a predefined folder. This is especially nice if you&amp;rsquo;re writing a paper and constantly searching for new literature. If you&amp;rsquo;re only bothering with writing one paper, then this might be enough. When you write the second paper, simply instruct Mendeley to write to a different file. However, if you&amp;rsquo;re writing two or more scientific documents using the same set of references, then you will need something smarter. What&amp;rsquo;s more problematic is that Mendeley dumps everything inside the references, including location of the PDF and any notes you make. This might cause &lt;span class=&#34;latex&#34;&gt;L&lt;sup&gt;a&lt;/sup&gt;T&lt;sub&gt;e&lt;/sub&gt;X&lt;/span&gt; to fail to compile.
&lt;/p&gt;

&lt;h2 id=&#34;the-seamless-framework-explain&#34;&gt;The seamless framework explain&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s say Mendeley is set to update &lt;code&gt;/path/to/tex-projects/library.bib&lt;/code&gt;, where &lt;code&gt;/path/to/tex&lt;/code&gt; is the location of the parent folder of all your &lt;span class=&#34;latex&#34;&gt;L&lt;sup&gt;a&lt;/sup&gt;T&lt;sub&gt;e&lt;/sub&gt;X&lt;/span&gt; documents, and &lt;code&gt;library.bib&lt;/code&gt; is the default name for the &lt;code&gt;bib&lt;/code&gt; file (you can&amp;rsquo;t change it). Let&amp;rsquo;s also say you are working on 3 projects &lt;code&gt;paper&lt;/code&gt;, &lt;code&gt;report&lt;/code&gt; and &lt;code&gt;book&lt;/code&gt; which uses the same reference set. Of course you can just use the absolute path to &lt;code&gt;library.bib&lt;/code&gt; in all these projects - but this makes your project non-portable. So you will need to use separate &lt;code&gt;bib&lt;/code&gt; files (with the same content) in all projects. What we need is a tool that monitors changes to &lt;code&gt;library.bib&lt;/code&gt;, which on change detected, will do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read &lt;code&gt;library.bib&lt;/code&gt; and clean up all the unnecessary fields.&lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;library.bib&lt;/code&gt; to &lt;code&gt;/path/to/tex-projects/paper/&lt;/code&gt;, &lt;code&gt;/path/to/tex-projects/report/&lt;/code&gt; and &lt;code&gt;/path/to/tex-projects/book/&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, let&amp;rsquo;s do it.&lt;/p&gt;

&lt;h2 id=&#34;configure-mendeley&#34;&gt;Configure Mendeley.&lt;/h2&gt;

&lt;p&gt;This step is simple: go to Mendeley&amp;rsquo;s Preferences (keyboard shortcut &lt;kbd&gt;âŒ˜&lt;/kbd&gt;+&lt;kbd&gt;,&lt;/kbd&gt;), go to tab BibTeX and select the following options:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.ukio.info/img/banners/mendeley-to-tex-2.png&#34; width=&#34;100%&#34; style=&#34;max-width: 500px;&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;clean-up-library-bib&#34;&gt;Clean up library.bib&lt;/h2&gt;

&lt;p&gt;I have written a small Python code that does this automatically. You can download it &lt;a href=&#34;https://www.ukio.info/files/cleanbib.py&#34;&gt;&lt;i class=&#34;fa fa-download&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt; here&lt;/a&gt;. Let&amp;rsquo;s say you save it to &lt;code&gt;/path/to/tex-projects/&lt;/code&gt;. I currently hardcode it to remove &lt;code&gt;annote&lt;/code&gt;, &lt;code&gt;annotate&lt;/code&gt;, &lt;code&gt;abstract&lt;/code&gt;, &lt;code&gt;mendeley-groups&lt;/code&gt;, &lt;code&gt;keywords&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;. These fields are quite problematic because they might be long and contain special character. I also make it comment out &lt;code&gt;issn&lt;/code&gt;, &lt;code&gt;isbn&lt;/code&gt;, &lt;code&gt;doi&lt;/code&gt;, just in case I want to have a quick look. All the other fields are kept intact. The utility takes two arguments, as following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;
cleanbib.py --file /path/to/tex-projects/library.bib --out /path/to/tex-projects/cleaned.bib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells python to read the original references in &lt;code&gt;library.bib&lt;/code&gt;, clean it up and save the result in &lt;code&gt;cleaned.bib&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;copy-to-multiple-places&#34;&gt;Copy to multiple places&lt;/h2&gt;

&lt;p&gt;To make it simple, I wrote a small script to do this, after calling &lt;code&gt;cleanbib&lt;/code&gt;, it also omits a notification on screen (only works for Mac). The script is pretty simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;
#!/bin/bash

# Omit a message
osascript -e &#39;display notification &#34;library.bib cleaned up&#34; with title &#34;Mendeley change detected&#34;&#39;

# Call the python script
python /path/to/tex-projects/cleanbib.py -f /path/to/tex-projects/library.bib -o /path/to/tex-projects/cleaned.bib

# Copy the result to all projects:
cp /path/to/tex-projects/cleaned.bib /path/to/tex-projects/paper/cleaned.bib
cp /path/to/tex-projects/cleaned.bib /path/to/tex-projects/report/cleaned.bib
cp /path/to/tex-projects/cleaned.bib /path/to/tex-projects/book/cleaned.bib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s say you save this bash script in &lt;code&gt;/path/to/tex-projects/cleanbib.sh&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;The last thing we need is to listen to changes in &lt;code&gt;library.bib&lt;/code&gt; and run the bash code on change detected. &lt;a href=&#34;https://github.com/emcrisostomo/fswatch&#34;&gt;&lt;i class=&#34;fa fa-github&#34;&gt;&lt;code&gt;fswatch&lt;/code&gt;&lt;/i&gt;&lt;/a&gt; is a nice cross-platform tool that provides the functionality we want. We will hook &lt;code&gt;fswatch&lt;/code&gt; with &lt;code&gt;cleanbib.sh&lt;/code&gt; with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;
fswatch -o /path/to/tex-projects/library.bib | xargs -n1 /path/to/tex-projects/cleanbib.sh &amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it. Now &lt;code&gt;fswatch&lt;/code&gt; will work behind the scene, detecting any changes that Mendeley makes to &lt;code&gt;library.bib&lt;/code&gt;, then call &lt;code&gt;cleanbib.sh&lt;/code&gt; to clean up the &lt;code&gt;bib&lt;/code&gt; file and deploy it to all the projects that you&amp;rsquo;re working on. With this, as soon as you make any changes in Mendeley, you can immediately go back to your &lt;span class=&#34;latex&#34;&gt;T&lt;sub&gt;e&lt;/sub&gt;X&lt;/span&gt; editor (such as &lt;a href=&#34;http://www.texstudio.org/&#34;&gt;TexStudio&lt;/a&gt; - my recommendation) and cite the new or changed reference.&lt;/p&gt;

&lt;h2 id=&#34;future-work&#34;&gt;Future work&lt;/h2&gt;

&lt;p&gt;Obviously, these are quite some steps to do just a simple thing. In theory, a single &lt;code&gt;Python&lt;/code&gt; file should be able to do all that - listen to file change, displaying notification, clean up the &lt;code&gt;bib&lt;/code&gt; file and deploy to several places. In addition, it should be possible for user to provide a set of key they want to keep as argument, instead of having them hardcoded. This is dedicated as future work.&lt;/p&gt;]]></description>
    </item>
    
 
    <item>
      <title>High quality graphics for your Latex document: The Matlab route</title>
      <link>https://www.ukio.info/blog/matlab-to-latex/</link>
      <pubDate>Thu, 08 Dec 2016 14:40:31 &#43;1200</pubDate>
      
      <guid>https://www.ukio.info/blog/matlab-to-latex/</guid>
      <description>&lt;![CDATA[&lt;p&gt;You use &lt;span class=&#34;latex&#34;&gt;L&lt;sup&gt;a&lt;/sup&gt;T&lt;sub&gt;e&lt;/sub&gt;X&lt;/span&gt; instead of a WYSIWYG word processing program because they can&amp;rsquo;t cope with the high quality required for publication. But your nice professional looking documents can be ruined because you insert the wrong type of figures. Bitmap figures are easily pixelated because the actual size is not always known beforehand. Exporting figures as PDF to be included sounds like a good idea but you&amp;rsquo;ll quickly notice the problem with the text (e.g. axis label and ticks,&amp;hellip;) which needs to be rendered by Latex to get the correct font and size.&lt;/p&gt;

&lt;p&gt;Hard-core Tex users can find the answer to this problem in Tikz or Pgfplot. Of course figures generated at this level is as good as it gets. I use Tikz picture quite frequently for text-heavy diagrams and simple plots. However, if the figure is moderately complicated or if it&amp;rsquo;s bound to precise data, then generating figures this way quickly becomes unmanageable.
&lt;/p&gt;

&lt;h2 id=&#34;matlab-comes-to-the-rescue&#34;&gt;Matlab comes to the rescue&lt;/h2&gt;

&lt;p&gt;An alternative solution is to draw the plots in Matlab/Python (with matplotlib) and export it in a format that can be included in Latex with the text part of the figure stored separately. Matlab does not support this natively but there are lots of community scripts capable of doing so. Below are a few that I have tried (to my knowledge, I have tried all of them):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://au.mathworks.com/matlabcentral/fileexchange/22022-matlab2tikz-matlab2tikz&#34;&gt;Matlab2Tikz&lt;/a&gt;: This script will convert Matlab plots to Tikz/PGFPlot figures which can be &lt;code&gt;\input{}&lt;/code&gt; directly into your Tex document. Basically it writes the Tikz commands for you. The catch is that it can&amp;rsquo;t deal with plots that have pixelated images, and not all types of plots can be converted. In my experience, this tools only works with simple plots. Try it with anything more than just a few curves and the generated file will likely to cause all sort of weird errors.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://au.mathworks.com/matlabcentral/fileexchange/12962-matfig2pgf&#34;&gt;Matfig2PGF&lt;/a&gt;: Same idea as &lt;strong&gt;Matlab2Tikz&lt;/strong&gt; but it generates PGF code instead. PGF is a lower level language than Tikz, so the generated file is usually quite big. It can blow out of 5000 lines easily even for mildly complicated figures. This might render your Tex editor out of memory. It also can&amp;rsquo;t deal with pictures.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://au.mathworks.com/matlabcentral/fileexchange/21286-matlabfrag&#34;&gt;Matlabfrag&lt;/a&gt;: This toll will generate two files, one EPS containing non-text part and one TEX file containing the text. Then you can use PsFrag to render the text and overlay it on top of the EPS file. This is one of the first complete solution I found, since the part that generates EPS file is actually a Matlab routine, so there should be no error to expect. However, PsFrag is notoriously difficult to handle, because it requires &lt;code&gt;--shell-escape&lt;/code&gt; to be enabled to call a external routine for generating figures. The smallest changes to your environment will result in an error. I once wasted a whole day bashing my head against the monitor because the same document that had rendered a day before now resulted in an error. I later found out that the shell it escape to is &lt;code&gt;sh&lt;/code&gt; (not even &lt;code&gt;Bash&lt;/code&gt;), and for some reason the &lt;code&gt;PATH&lt;/code&gt; variable was not loaded, preventing it from calling its external routines. Also, PsFrag requires &lt;span class=&#34;latex&#34;&gt;P&lt;cap&gt;d&lt;/cap&gt;&lt;cap&gt;f&lt;/cap&gt;L&lt;sup&gt;a&lt;/sup&gt;T&lt;sub&gt;e&lt;/sub&gt;X&lt;/span&gt; to function, so &lt;span class=&#34;latex&#34;&gt;X&lt;sub&gt;ÆŽ&lt;/sub&gt;T&lt;sub&gt;e&lt;/sub&gt;X&lt;/span&gt; will not work. Your only option if you want to use True Type Face fonts is &lt;span class=&#34;latex&#34;&gt;L&lt;cap&gt;u&lt;/cap&gt;&lt;cap&gt;a&lt;/cap&gt;L&lt;sup&gt;a&lt;/sup&gt;T&lt;sub&gt;e&lt;/sub&gt;X&lt;/span&gt;, in theory - because it didn&amp;rsquo;t work for me. So I eventually ditched this option.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://au.mathworks.com/matlabcentral/fileexchange/4638-laprint&#34;&gt;Laprint&lt;/a&gt; This is very similar to &lt;strong&gt;Matlabfrag&lt;/strong&gt; except that it requires more parameters to be passed into. They have the exact same pros and cons.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://au.mathworks.com/matlabcentral/fileexchange/52700-plot2latex&#34;&gt;Plot2LaTeX&lt;/a&gt; So far this is the best option and I&amp;rsquo;ve been using this tool for a long time. It&amp;rsquo;s also based on the idea of exporting text and non-text separately, then typeset the text on top of the figure. But that part is done using Inkscape. The tool simply export a SVG file using Matlab&amp;rsquo;s built-in routine, then call inkscape to convert the SVG file to a PDF, which is purely graphic, and a &lt;code&gt;pdf_tex&lt;/code&gt; file containing instructions to overlay that PDF with text. What&amp;rsquo;s nice about it is that the SVG file is modifiable by inkscape. Sometimes the graph needs very minor modifications which might be difficult with Matlab (for example: convert the axes into arrows), but effortlessly doable in Inkscape. Detailed workflow for using Plot2LaTeX is presented below.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;matlab-to-span-class-latex-l-sup-a-sup-t-sub-e-sub-x-span-via-plot2latex&#34;&gt;Matlab to &lt;span class=&#34;latex&#34;&gt;L&lt;sup&gt;a&lt;/sup&gt;T&lt;sub&gt;e&lt;/sub&gt;X&lt;/span&gt; via Plot2LaTeX&lt;/h2&gt;

&lt;p&gt;The workflow is simple, you just need to install Plot2LaTeX and Inkscape once, then:&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4 id=&#34;summary-of-steps&#34;&gt;Summary of steps:&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Plot in Matlab&lt;/li&gt;
&lt;li&gt;Export with &lt;code&gt;Plot2Latex()&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;If necessary: modify in Inkscape and save as &lt;code&gt;.pdf_tex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Import into &lt;span class=&#34;latex&#34;&gt;L&lt;sup&gt;a&lt;/sup&gt;T&lt;sub&gt;e&lt;/sub&gt;X&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s break it down:&lt;/p&gt;

&lt;h3 id=&#34;0-installation&#34;&gt;0. Installation&lt;/h3&gt;

&lt;p&gt;Google will let you know where to download the latest version of Plot2Latex and Inkscape. On Mac, Inkscape requires &lt;code&gt;XQuartz&lt;/code&gt; because it&amp;rsquo;s built on XWindow. There&amp;rsquo;s also a separate branch built on osxmenu which can run natively on Mac. There hasn&amp;rsquo;t been any official release and the development seems to have stopped since May 2015 (last version was based on r12922). However it&amp;rsquo;s stable enough for me (using OSX El Capitan) to recommend it. An executable can be downloaded from &lt;a href=&#34;https://inkscape.org/en/~su_v/galleries/osxmenu-r12922/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Plot2Latex will call Inkscape so it is necessary to provide the tool with the correct path to inkscape. Search for the line beginning with &lt;code&gt;DIR_INKSC =&lt;/code&gt; and modify it, e.g.:&lt;/p&gt;

&lt;pre&gt;
  &lt;code class&#34;matlab&#34;&gt;
DIR_INKSC = &#39;/Applications/Inkscape.app/Contents/MacOS/inkscape&#39;;
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&#34;1-plot-in-matlab&#34;&gt;1. Plot in Matlab&lt;/h3&gt;

&lt;p&gt;You can seriously go nuts! Bring it on any sort of plot you can think of. The routine eventually call Matlab&amp;rsquo;s &lt;code&gt;saveas()&lt;/code&gt; so as long as the MathWork guys don&amp;rsquo;t mess it up, any plot should be savable. It&amp;rsquo;s also possible to use Latex as the renderer for your strings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.ukio.info/img/banners/latex-plot-2.png&#34; width=&#34;100%&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-export-with-plot2latex&#34;&gt;2. Export with Plot2Latex&lt;/h3&gt;

&lt;p&gt;Once you&amp;rsquo;re happy with the plot, you can export it with the following command:&lt;/p&gt;

&lt;pre&gt;
  &lt;code class&#34;matlab&#34;&gt;
Plot2LaTeX(gcf, &#39;/path/to/tex/figures/my_figure&#39;)
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;This will generates &lt;code&gt;my_figure.svg&lt;/code&gt;, &lt;code&gt;my_figure.pdf&lt;/code&gt; and &lt;code&gt;my_figure.pdf_tex&lt;/code&gt; in folder &lt;code&gt;/path/to/tex/figures&lt;/code&gt;. It is possible to use the &lt;code&gt;.pdf_tex&lt;/code&gt; file right at this stage, but you might want to modify it a bit, at least to get rid of the empty margin surrounding the figures.&lt;/p&gt;

&lt;h3 id=&#34;3-modify-in-inkscape&#34;&gt;3. Modify in Inkscape&lt;/h3&gt;

&lt;p&gt;Open the SVG file with Inkscape. You&amp;rsquo;ll need to get used to a few Inkscape commands but in general it&amp;rsquo;s not that different from other image processing program. You&amp;rsquo;ll need to get rid of several blank layers that span the whole page before you can modify anything. You can get Inkscape to automatically shrink the page to fit the actual figure, removing all white margin. And you can do that by clicking &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Document Properties&lt;/code&gt; (Keyboard shortcut:  &lt;kbd class=&#34;is-icon&#34;&gt;â‡§âŒ˜D&lt;/kbd&gt;), expand &lt;code&gt;Resize page to content...&lt;/code&gt;, then click on &lt;code&gt;Resize page to drawing or selection&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.ukio.info/img/banners/latex-plot-3.png&#34; width=&#34;100%&#34; style=&#34;max-width: 500px;&#34;&gt;&lt;/p&gt;

&lt;p&gt;Now you can save the changes to &lt;code&gt;.pdf_tex&lt;/code&gt; by selecting &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Save as&lt;/code&gt; (Keyboard shortcut:  &lt;kbd class=&#34;is-icon&#34;&gt;â‡§âŒ˜S&lt;/kbd&gt;), choose &lt;code&gt;PDF&lt;/code&gt;, select &lt;code&gt;Omit text in PDF and create LaTeX file&lt;/code&gt;. Now you&amp;rsquo;re ready to import the figure into &lt;span class=&#34;latex&#34;&gt;L&lt;sup&gt;a&lt;/sup&gt;T&lt;sub&gt;e&lt;/sub&gt;X&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.ukio.info/img/banners/latex-plot-4.png&#34; width=&#34;100%&#34; style=&#34;max-width: 500px;&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-import-into-span-class-latex-l-sup-a-sup-t-sub-e-sub-x-span&#34;&gt;4. Import into &lt;span class=&#34;latex&#34;&gt;L&lt;sup&gt;a&lt;/sup&gt;T&lt;sub&gt;e&lt;/sub&gt;X&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;.pdf_tex&lt;/code&gt; file is nothing but a piece of TEX code, so you would import it into &lt;span class=&#34;latex&#34;&gt;L&lt;sup&gt;a&lt;/sup&gt;T&lt;sub&gt;e&lt;/sub&gt;X&lt;/span&gt; using &lt;code&gt;\input{}&lt;/code&gt; as following&lt;/p&gt;

&lt;pre&gt;
  &lt;code class&#34;tex&#34;&gt;
\usepackage{graphicx}
\graphicspath{{./figures/}}

\begin{document}
...
\begin{figure}
  \footnotesize
  \def\svgwidth{.7\linewidth}
  \input{figures/my_figure.pdf_tex}
\end{figure}
...
\end{document}
  &lt;/code&gt;
&lt;/pre&gt;

&lt;blockquote&gt;
&lt;h5 id=&#34;explain&#34;&gt;Explain:&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;\graphicspath{{./figures/}}&lt;/code&gt; You will need this because the &lt;code&gt;.pdf_tex&lt;/code&gt; file will import the PDF file without fully qualified path. This is to tell it to find any PDF files in &lt;code&gt;figures/&lt;/code&gt; folder.&lt;br /&gt;
&lt;code&gt;\footnotesize&lt;/code&gt; Set the size of text elements to footnotesize.&lt;br /&gt;
&lt;code&gt;\def\svgwidth{.7\linewidth}&lt;/code&gt; Set the overall width of the figure to be 0.7 the line&amp;rsquo;s width.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;result&#34;&gt;Result:&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://www.ukio.info/img/banners/latex-plot-1.png&#34; width=&#34;100%&#34; style=&#34;max-width: 500px;&#34;&gt;&lt;/p&gt;

&lt;p&gt;You can notice that the figure looks infinitely sharp and the text is typeset using the right font and size.&lt;/p&gt;

&lt;h2 id=&#34;some-existing-problems&#34;&gt;Some existing problems&lt;/h2&gt;

&lt;p&gt;There are two known problems, both belong to Inkscape. It might have well been fixed in earlier versions of Inkscape but since I prefer the osxmenu version, I&amp;rsquo;m stuck with these bugs. I&amp;rsquo;m listing them out here together with the solutions, in case you bump into one:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Messy PDF pages
Ideally all graphic elements should be on one page, but for some reason, sometimes Inkscape decides to draw them separately on different pages, then instruct &lt;span class=&#34;latex&#34;&gt;L&lt;sup&gt;a&lt;/sup&gt;T&lt;sub&gt;e&lt;/sub&gt;X&lt;/span&gt; to layout them on top of each other, such as:&lt;/p&gt;

&lt;pre&gt;
  &lt;code class&#34;tex&#34;&gt;
\put(0,0){\includegraphics[width=\unitlength,page=1]{myfig.pdf}}
...
\put(0,0){\includegraphics[width=\unitlength,page=2]{myfig.pdf}}
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;But the real problem comes from the generated &lt;code&gt;.pdf_tex&lt;/code&gt;, most of the time the pages are off by 1, e.g. if the element is on page 3, the instruction will be to draw page 4. This will lead to error when the last page is drawn because the index is 1 more than the maximum. You will need to manually modify the page numbers to fix the problem.&lt;/p&gt;

&lt;p&gt;Most of the time, there will be a single-page PDF, but the &lt;code&gt;.pdf_tex&lt;/code&gt; will import it twice, with the second time referring to page 2. In this case, simply remove the duplicate.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Percentage sign
&lt;code&gt;%&lt;/code&gt; is the beginning of a comment in &lt;span class=&#34;latex&#34;&gt;L&lt;sup&gt;a&lt;/sup&gt;T&lt;sub&gt;e&lt;/sub&gt;X&lt;/span&gt;, so if your plot has strings with a comment sign, it will be used without escaping in the &lt;code&gt;.pdf_tex&lt;/code&gt; file. This will obviously lead to invalid syntax. Again, manual modification is required to fix it. You can also modify &lt;code&gt;Plot2LaTeX.m&lt;/code&gt; to automatically escaping &lt;code&gt;%&lt;/code&gt; before rendering the SVG file as following:&lt;/p&gt;

&lt;pre&gt;
  &lt;code class&#34;matlab&#34;&gt;
function strXML = EscapeXML(str)
  % ESCAPEXML repaces special characters(&lt;,&gt;,&#39;,&#34;,&amp;) -&gt; (&amp;lt;,&amp;gt;,&amp;apos;,&amp;quot;,&amp;amp;)
  escChar = {&#39;&amp;&#39;,&#39;&lt;&#39;,&#39;&gt;&#39;,&#39;&#39;&#39;&#39;,&#39;&#34;&#39;,&#39;%&#39;};
  repChar = {&#39;&amp;amp;&#39;,&#39;&amp;lt;&#39;,&#39;&amp;gt;&#39;,&#39;&amp;apos;&#39;,&#39;&amp;quot;&#39;,&#39;\\%&#39;};
  strXML = regexprep(str,escChar,repChar);
end
  &lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;why-use-plot2latex-just-to-get-the-svg-file&#34;&gt;Why use Plot2LaTeX just to get the SVG file&lt;/h2&gt;

&lt;p&gt;You might have realised that it doesn&amp;rsquo;t seem necessary to use Plot2LaTeX, if we only care about the SVG, and the &lt;code&gt;.pdf_tex&lt;/code&gt; part is generated manually with Inkscape. Can we export the figure directly to SVG using &lt;code&gt;saveas()&lt;/code&gt;? Certainly, in some cases it might work. Problems arise when the plot has axes. All the ticks on an axis will be rendered as one long string, with single tick no longer binds to a data point. So when the figure is rendered in LaTex, the axis ticks will squash together. We need Plot2LaTeX to first separate the tick labels and bind them to the exact data point on the axes. This way no matter what font and size is used, the axis will always be rendered correctly.&lt;/p&gt;]]></description>
    </item>
    
  </channel>
</rss>